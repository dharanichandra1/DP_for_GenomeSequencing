#Smith-Waterman Algorithm
def smith_waterman(seq1, seq2, gap_penalty=-1, match_score=1, mismatch_score=-1):
    len_seq1 = len(seq1)
    len_seq2 = len(seq2)

    # Initialize score matrix
    score_matrix = np.zeros((len_seq1 + 1, len_seq2 + 1))

    # Initialize variables to track maximum score and its position
    max_score = 0
    max_i, max_j = 0, 0

    # Fill the matrix
    for i in range(1, len_seq1 + 1):
        for j in range(1, len_seq2 + 1):
            match = score_matrix[i - 1][j - 1] + (match_score if seq1[i - 1] == seq2[j - 1] else mismatch_score)
            delete = score_matrix[i - 1][j] + gap_penalty
            insert = score_matrix[i][j - 1] + gap_penalty
            score_matrix[i][j] = max(0, match, delete, insert)

            # Update maximum score and its position
            if score_matrix[i][j] > max_score:
                max_score = score_matrix[i][j]
                max_i, max_j = i, j

    return max_score, max_i, max_j
